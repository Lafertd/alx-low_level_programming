!<arch>
0-isupper.c/    0           0     0     644     181       `
#include "main.h"

/**
 * _isupper - uppercase letters
 * @c: char to check
 *
 * Return: 0 or 1
 */

int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
return (1);
else
return (0);
}

0-memset.c/     0           0     0     644     383       `
#include "main.h"

/**
 * _memset - function fills the first n bytes of the memory area pointed to
 * by s with the constant byte b
 * @s: pointer
 * @b: contant byte
 * @n: bytes of the memory to be filled
 *
 * Return: a pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		s[i] = b;
		i++;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     343       `
#include "main.h"

/**
 * _strcat - function that concatenates two strings
 * @dest: 1st string
 * @src: 2nd string
 *
 * Return: string concatenated
 */
char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j = 0;

	while (dest[i] != 0)
		i++;
	while (src[j] != 0)
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     409       `
#include "main.h"

/**
 * _atoi - function that convert a string to an integer
 * @s: string to convert
 *
 * Return: number
 */
int _atoi(char *s)
{
	int pos = 0;
	int sign = 1;
	int n = 0;

	while ((s[pos] < '0' || s[pos] > '9') && s[pos] != '\0')
	{
		if (s[pos] == '-')
			sign *= -1;
		pos++;
	}
	while (s[pos] >= '0' && s[pos] <= '9')
	{
		n = n * 10 + sign * (s[pos] - '0');
		pos++;
	}
	return (n);
}

1-isdigit.c/    0           0     0     644     243       `
#include "main.h"

/**
 * _isdigit -  function that checks for a digit (0 through 9)
 * @c: digit to check
 *
 * Return: 1 if c is a digit or 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     382       `
#include "main.h"

/**
 * _memcpy - function copies n bytes from memory area src to memory area dest
 * @dest: pointer to be modificated
 * @src: pointer to be copied
 * @n: n bytes from memory area src
 *
 * Return: a pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		dest[i] = src[i];
		i++;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     416       `
#include "main.h"

/**
 * _strncat - function that concatenates two strings
 * @dest: string 1
 * @src: string 2
 * @n: bytes from src to be appened
 *
 * Return: pointer to string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int j = 0;

	while (dest[i] != '\0')
		i++;
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}
	if (j == n)
		dest[i] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     475       `
#include "main.h"

/**
 * _strchr - function that locates a character in a string
 * @s: string
 * @c: character to be located in s
 *
 * Return: a pointer to the first occurrence of the character c
 * in the string s, or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{

	int counter = 0;

	while (s[counter] != 0)
	{
		if (s[counter] == c)
		{
			return (&s[counter]);
		}
		counter++;
	}
	if (s[counter] == c)
		return (&s[counter]);
	return (0);
}

2-strlen.c/     0           0     0     644     254       `
#include "main.h"
/**
 *_strlen - function that returns the length of a string
 * @s: string to measure
 * Description: string lenght
 * Return: size
 */
int _strlen(char *s)
{
	int count = 0;

	while (s[count] != 0)
	{
		count++;
	}
	return (count);

}
2-strncpy.c/    0           0     0     644     432       `
#include "main.h"

/**
 * _strncpy - function that copies a string
 * @dest: string destination
 * @src: string to be copied
 * @n: number of bytes to be copied
 *
 * Return: pointer to the resulting string dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int len1 = 0;

	while (len1 < n && src[len1] != 0)
	{
		dest[len1] = src[len1];
		len1++;
	}
	while (len1 < n)
	{
		dest[len1] = '\0';
		len1++;
	}

	return (dest);
}

3-islower.c/    0           0     0     644     223       `
#include "main.h"
/**
* _islower - check if char is lowercase
* @c: is the char to be checked
* Return: 1 if char is lowercase, otherwise 0.
*/
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
return (1);
else
return (0);
}

3-puts.c/       0           0     0     644     271       `
#include "main.h"

/**
 * _puts -  function that prints a string, followed by a new line, to stdout
 * @str: string to be printed
 *
 * Return: void(Solved)
 */
void _puts(char *str)
{
	int d = 0;

	while (str[d] != 0)
	{
		_putchar(str[d]);
		d++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     290       `
#include "main.h"

/**
 * _strcmp - function that compares two strings
 * @s1: string 1
 * @s2: string 2
 *
 * Return: comparisson
 */
int _strcmp(char *s1, char *s2)
{
	int pos = 0;

	while (s1[pos] != 0 && s2[pos] != 0 && s1[pos] == s2[pos])
	{
		pos++;
	}
	return (s1[pos] - s2[pos]);
}
3-strspn.c/     0           0     0     644     614       `
#include "main.h"

/**
 * _strspn -  function that gets the length of a prefix substring
 * @s: string
 * @accept: prefix
 *
 * Return: the number of bytes in the initial segment of s which consist
 * only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n;
	unsigned int m;
	unsigned int len_s = 0;
	unsigned int len_accept = 0;

	while (s[len_s] != 0)
		len_s++;

	while (accept[len_accept] != 0)
		len_accept++;

	for (n = 0; n < len_s; n++)
	{
		for (m = 0; m < len_accept; m++)
		{
			if (s[n] == accept[m])
				break;
		}
		if (accept[m] == 0)
			break;
	}
	return (n);
}
4-isalpha.c/    0           0     0     644     220       `
#include "main.h"
/**
* _isalpha - checks for alphabetic character
* @c: the character to be checked
* Return: 1 (Success), 0 (else)
*/
int _isalpha(int c)
{
return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     622       `
#include "main.h"

/**
 * _strpbrk - function locates the first occurrence in the string s of
 * any of the bytes in the string accept
 * @s: string
 * @accept: string
 *
 * Return: a pointer to the byte in s that matches one of the bytes in accept,
 * or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int counter_s = 0;
	unsigned int counter_accept = 0;

	while (s[counter_s] != 0)
	{
		while (accept[counter_accept] != 0)
		{
			if (s[counter_s] == accept[counter_accept])
				return (&s[counter_s]);
			counter_accept++;
		}
		counter_accept = 0;
		counter_s++;
	}

	return (0);
}
5-strstr.c/     0           0     0     644     651       `
#include "main.h"

/**
 * _strstr - function finds the first occurrence of the substring needle in
 * the string haystack. The terminating null bytes (\0) are not compared
 * @haystack: string
 * @needle: string
 *
 * Return: a pointer to the beginning of the located substring, or NULL if
 * the substring is not found.
 */
char *_strstr(char *haystack, char *needle)
{
	int h = 0;
	int n = 0;

	while (haystack[h] != 0)
	{
		while (needle[n] != 0 && haystack[h] == needle[0])
		{
			if (haystack[h + n] == needle[n])
				n++;
			else
				break;

		}
		if (needle[n] != 0)
		{
			n = 0;
			h++;
		}
		else
			return (&haystack[h]);
	}
	return (0);
}

6-abs.c/        0           0     0     644     196       `
#include "main.h"
/**
* _abs - computes the absolute value of an integer
* @n: the int to check
* Return: the absolute value of int
*/
int _abs(int n)
{
if (n >= 0)
{
return (n);
}
return (-n);
}
9-strcpy.c/     0           0     0     644     420       `
#include "main.h"

/**
 * _strcpy -  function that copies the string pointed to by src, including the
 * terminating null byte (\0), to the buffer pointed to by dest
 * @dest: string destination
 * @src: string to be copied
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int pos = 0;

	while (src[pos] != 0)
	{
		dest[pos] = src[pos];
		pos++;
	}
	dest[pos] = src[pos];

	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

